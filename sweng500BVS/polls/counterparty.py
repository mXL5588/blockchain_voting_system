import json
import requests
from requests.auth import HTTPBasicAuth
from django.http import HttpResponse

url = "http://localhost:14000/api/"
header = {'content-type': 'application/json'}
auth = HTTPBasicAuth('rpc', 'sweng')

## default port for bitcoin testnet
## (change to 8332 for 'main net'),
rpcPort = 18332
rpcUser = 'bitcoinrpc'
## not a real password
## but if you use the random password generated by bitcoind
## your password should look something like this
rpcPassword = 'rpc'
serverURL = 'http://' + rpcUser + ':' + rpcPassword + '@localhost:' + str(rpcPort)

headers = {'content-type': 'application/json'}

def getBalance(address,asset):
  result = "None"
  payload = {
     "method": "get_balances",
     "params": {
                "filters": [{"field": "address", "op": "==", "value": address}],
                "filterop": "or"
               },
     "jsonrpc": "2.0",
     "id": 0
    }
  node=json.dumps(payload)
  response = requests.post(url, data=node, headers=headers, auth=auth)
  print("Response for balance check: ", response.text)
  jsonObj = json.loads(response.text)
  for results in jsonObj['result']:
    if results['asset'] == asset:
      result = results['asset'], ":" , results['quantity']
  return result


def getAssetList(address):
  result = []

  payload = {
     "method": "get_balances",
     "params": {
                "filters": [{"field": "address", "op": "==", "value": address}],
                "filterop": "or"
               },
     "jsonrpc": "2.0",
     "id": 0
    }
  node=json.dumps(payload)
  response = requests.post(url, data=node, headers=headers, auth=auth)
  
  jsonObj = json.loads(response.text)
  for results in jsonObj['result']:
      result.append(results['asset'])
  return result

def createIssuance(address, assetName):
  # Issuance (indivisible)
  payload = {
     "method": "create_issuance",
     "params": {
                "source": address,
                "asset": assetName,
                "quantity": 10,
                "divisible": False,
                "description": "This is issuance of assets for ballot",
                "transfer_destination": ""
               },
     "jsonrpc": "2.0",
     "id": 0
    }
  #response = requests.post(serverURL, headers=headers, data=json.dumps(payload))
  return requests.post(url, data=json.dumps(payload), headers=header, auth=auth)

def createSend(srcAddress, destAddress, assetName):
  # Send 1 XCP (specified in satoshis) from one address to another.
  payload = {
             "method": "create_send",
             "params": {
                        'source': srcAddress, 
                        'destination': destAddress,
                        'asset': assetName,
                        'quantity': 1
                       },
             "jsonrpc": "2.0",
             "id": 0
            }

  return requests.post(url, data=json.dumps(payload), headers=headers, auth=auth)

def signRawTransaction(result):
  payload = {
    "method": 'signrawtransaction',
    "params": [result],
    "jsonrpc": "2.0"
    }
  return requests.post(serverURL, headers=headers, data=json.dumps(payload))

def sendRawTransaction(result):
  payload = {
    "method": 'sendrawtransaction',
    "params": [result],
    "jsonrpc": "2.0"
    }
  return requests.post(serverURL, headers=headers, data=json.dumps(payload))