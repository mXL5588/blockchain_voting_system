from django.contrib import admin
from .models import Ballot, VoterChoice, ContestantChoice
import json
import requests
from requests.auth import HTTPBasicAuth
from django.http import HttpResponse







url = "http://localhost:14000/api/"
header = {'content-type': 'application/json'}
auth = HTTPBasicAuth('rpc', 'sweng')

## default port for bitcoin testnet
## (change to 8332 for 'main net'),
rpcPort = 18332
rpcUser = 'bitcoinrpc'
## not a real password
## but if you use the random password generated by bitcoind
## your password should look something like this
rpcPassword = 'rpc'
serverURL = 'http://' + rpcUser + ':' + rpcPassword + '@localhost:' + str(rpcPort)

headers = {'content-type': 'application/json'}

def getBalance(address,asset):
  result = "None"
  payload = {
     "method": "get_balances",
     "params": {
                "filters": [{"field": "address", "op": "==", "value": address}],
                "filterop": "or"
               },
     "jsonrpc": "2.0",
     "id": 0
    }
  node=json.dumps(payload)
  response = requests.post(url, data=node, headers=headers, auth=auth)
  print("Response for balance check: ", response.text)
  jsonObj = json.loads(response.text)
  for results in jsonObj['result']:
    if results['asset'] == asset:
      result = results['asset'], ":" , results['quantity']
  return result

def createIssuance(address, assetName):
  # Issuance (indivisible)
  payload = {
     "method": "create_issuance",
     "params": {
                "source": address,
                "asset": assetName,
                "quantity": 10,
                "divisible": False,
                "description": "This is issuance of assets for ballot",
                "transfer_destination": ""
               },
     "jsonrpc": "2.0",
     "id": 0
    }
  #response = requests.post(serverURL, headers=headers, data=json.dumps(payload))
  return requests.post(url, data=json.dumps(payload), headers=header, auth=auth)

def createSend(srcAddress, destAddress, assetName):
  # Send 1 XCP (specified in satoshis) from one address to another.
  payload = {
             "method": "create_send",
             "params": {
                        'source': srcAddress, 
                        'destination': destAddress,
                        'asset': assetName,
                        'quantity': 1
                       },
             "jsonrpc": "2.0",
             "id": 0
            }

  return requests.post(url, data=json.dumps(payload), headers=headers, auth=auth)

def signRawTransaction(result):
  payload = {
    "method": 'signrawtransaction',
    "params": [result],
    "jsonrpc": "2.0"
    }
  return requests.post(serverURL, headers=headers, data=json.dumps(payload))

def sendRawTransaction(result):
  payload = {
    "method": 'sendrawtransaction',
    "params": [result],
    "jsonrpc": "2.0"
    }
  return requests.post(serverURL, headers=headers, data=json.dumps(payload))

class VoterChoiceInline(admin.TabularInline):
    model = VoterChoice
    extra = 3

class ContestantChoiceInline(admin.TabularInline):
    model = ContestantChoice
    extra = 3


class BallotAdmin(admin.ModelAdmin):
    ballotAddress = ""
    fieldsets = [
        (None,               {'fields': ['ballot_name']}),
        (None,               {'fields': ['ballot_address']}),
        ('Date information', {'fields': ['pub_date'], 'classes': ['expand']}),
        ('Date information', {'fields': ['end_date'], 'classes': ['expand']}),
    ]
    #inlines = []
    inlines = [ContestantChoiceInline,VoterChoiceInline]
    
    # include a list filter
    list_filter = ['pub_date']
    list_display = ('ballot_name', 'ballot_address', 'pub_date', 'end_date', 'was_published_recently')

	
    # include a ballot search
    search_fields = ['ballot_name']

    def save_model(self, request, obj, form, change):
        print("********************************************************************************")
        print("Issuance: ", obj.ballot_address)
        if obj.ballot_issued == False:
          response = createIssuance(obj.ballot_address,obj.ballot_name)
          jsonObj = json.loads(response.text)
          if 'error' not in jsonObj:
            print("Response 1: ", jsonObj)
            response = signRawTransaction(jsonObj['result'])
            jsonObj = json.loads(response.text)
            if 'error' in jsonObj:
              print("Response 2: ", jsonObj)
              response = sendRawTransaction(jsonObj['result']['hex'])
              jsonObj = json.loads(response.text)
              if 'error' in jsonObj:
                print("Response 3: ", jsonObj)
                obj.ballot_issued = True
              else:
                print("Error-3 Response: ", jsonObj)
            else:
              print("Error-2 Response: ", jsonObj)
          else:
            print("Error-1 Response: ", jsonObj)
        super().save_model(request, obj, form, change)
    




        
    def save_formset(self, request, form, formset, change):
      print("___________________________________________________________________________________")
      # Create instances. Each instance will be a "row" (obj) of the inline model
      instances = formset.save(commit=False)
      if form.instance.isItVoter == True:
        # Iterate over the instances (objects of the Inline Model)
        for instance in instances:
            # Get the object's attribute (Model field)
            print("Voter Address: ", instance.voter_address)
            print("Voter Text: ", instance.voter_name)

            response = createSend(form.instance.ballot_address, instance.voter_address, form.instance.ballot_name)
            jsonObj = json.loads(response.text)
            if 'error' not in jsonObj:
              print("Response 1: ", jsonObj)
              response = signRawTransaction(jsonObj['result'])
              jsonObj = json.loads(response.text)
              if 'error' in jsonObj:
                print("Response 2: ", jsonObj)
                response = sendRawTransaction(jsonObj['result']['hex'])
                jsonObj = json.loads(response.text)
                if 'error' in jsonObj:
                  print("Response 3: ", jsonObj)

                  print("Balance for ", instance.voter_name, ":", getBalance(instance.voter_address, form.instance.ballot_name))
                else:
                  print("Error-3 Response: ", jsonObj)
              else:
                print("Error-2 Response: ", jsonObj)
            else:
              print("Error-1 Response: ", jsonObj)
        form.instance.isItVoter = False
      else:
        form.instance.isItVoter = True


      print("Balance for ", form.instance.ballot_name, ":", getBalance(form.instance.ballot_address, form.instance.ballot_name))
      super().save_formset(request,form, formset, change)

admin.site.register(Ballot, BallotAdmin)