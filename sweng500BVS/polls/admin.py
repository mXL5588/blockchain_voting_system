from django.contrib import admin
from .models import Ballot, Choice
import json
import requests
from requests.auth import HTTPBasicAuth
from django.http import HttpResponse







url = "http://localhost:14000/api/"
header = {'content-type': 'application/json'}
auth = HTTPBasicAuth('rpc', 'sweng')

## default port for bitcoin testnet
## (change to 8332 for 'main net'),
rpcPort = 18332
rpcUser = 'bitcoinrpc'
## not a real password
## but if you use the random password generated by bitcoind
## your password should look something like this
rpcPassword = 'rpc'
serverURL = 'http://' + rpcUser + ':' + rpcPassword + '@localhost:' + str(rpcPort)

headers = {'content-type': 'application/json'}





class ChoiceInline(admin.TabularInline):
    model = Choice
    extra = 3


class BallotAdmin(admin.ModelAdmin):
    ballotAddress = ""
    fieldsets = [
        (None,               {'fields': ['ballot_name']}),
        (None,               {'fields': ['ballot_address']}),
        ('Date information', {'fields': ['pub_date'], 'classes': ['expand']}),
        ('Date information', {'fields': ['end_date'], 'classes': ['expand']}),
    ]
    inlines = [ChoiceInline]
    
    # include a list filter
    list_filter = ['pub_date']
    list_display = ('ballot_name', 'ballot_address', 'pub_date', 'end_date', 'was_published_recently')

	
    # include a ballot search
    search_fields = ['ballot_name']

    def save_model(self, request, obj, form, change):
        print("********************************************************************************")
        ballotAddress = obj.ballot_address
        # Issuance (indivisible)
        payload = {
                   "method": "create_issuance",
                   "params": {
                              "source": obj.ballot_address,
                              "asset": obj.ballot_name,
                              "quantity": 10,
                              "divisible": False,
                              "description": "This is issuance of assets for ballot",
                              "transfer_destination": ""
                             },
                   "jsonrpc": "2.0",
                   "id": 0
                  }
        #response = requests.post(serverURL, headers=headers, data=json.dumps(payload))
        response = requests.post(url, data=json.dumps(payload), headers=header, auth=auth)
        jsonObj = json.loads(response.text)
        if 'error' not in jsonObj:
          print("Response 1: ", jsonObj)
          payload = {
            "method": 'signrawtransaction',
            "params": [jsonObj['result']],
            "jsonrpc": "2.0"
            }
          response = requests.post(serverURL, headers=headers, data=json.dumps(payload))
          jsonObj = json.loads(response.text)
          if 'error' in jsonObj:
            print("Response 2: ", jsonObj)
            payload = {
              "method": 'sendrawtransaction',
              "params": [jsonObj['result']['hex']],
              "jsonrpc": "2.0"
              }
            response = requests.post(serverURL, headers=headers, data=json.dumps(payload))
            jsonObj = json.loads(response.text)
            if 'error' in jsonObj:
              print("Response 3: ", jsonObj)
              super().save_model(request, obj, form, change)
            else:
              print("Error-3 Response: ", jsonObj)
          else:
            print("Error-2 Response: ", jsonObj)
        else:
          print("Error-1 Response: ", jsonObj)
        

        
    def save_formset(self, request, form, formset, change):
      print("___________________________________________________________________________________")
      # Create instances. Each instance will be a "row" (obj) of the inline model
      instances = formset.save(commit=False)
      # Iterate over the instances (objects of the Inline Model)
      for instance in instances:
          # Get the object's attribute (Model field)
          print("Voter Address: ", instance.voter_address)
          print("Voter Text: ", instance.voter_text)

          # Send 1 XCP (specified in satoshis) from one address to another.
          payload = {
                     "method": "create_send",
                     "params": {
                                'source': form.instance.ballot_address, 
                                'destination': instance.voter_address,
                                'asset': "ajsbdjadshhjbb",
                                'quantity': 1
                               },
                     "jsonrpc": "2.0",
                     "id": 0
                    }

          response = requests.post(url, data=json.dumps(payload), headers=headers, auth=auth)
          jsonObj = json.loads(response.text)
          if 'error' not in jsonObj:
            print("Response 1: ", jsonObj)
            payload = {
              "method": 'signrawtransaction',
              "params": [jsonObj['result']],
              "jsonrpc": "2.0"
              }
            response = requests.post(serverURL, headers=headers, data=json.dumps(payload))
            jsonObj = json.loads(response.text)
            if 'error' in jsonObj:
              print("Response 2: ", jsonObj)
              payload = {
                "method": 'sendrawtransaction',
                "params": [jsonObj['result']['hex']],
                "jsonrpc": "2.0"
                }
              response = requests.post(serverURL, headers=headers, data=json.dumps(payload))
              jsonObj = json.loads(response.text)
              if 'error' in jsonObj:
                print("Response 3: ", jsonObj)
              else:
                print("Error-3 Response: ", jsonObj)
            else:
              print("Error-2 Response: ", jsonObj)
          else:
            print("Error-1 Response: ", jsonObj)
      super().save_formset(request,form, formset, change)

admin.site.register(Ballot, BallotAdmin)